=b
You need to provide the headers for your csv file
=cut

use strict;
use warnings;
use Cwd;

my $currentPath = getcwd();
my @allfiles = `find $currentPath -type f -name  *.sout`;#sout in current folder
map { s/^\s+|\s+$//g; } @allfiles;
unless(@allfiles){die "no sout files to convert\n";}

for my $f (@allfiles){#loop over all sout files (QE output)
   
    my $file_path = `dirname $f`;
    my $file_name = `basename $f`;
    my $prefix = $file_name;
    $prefix =~ s/\.sout//g;
    chomp ($file_path, $file_name,$prefix);    
    chdir("$file_path");
    my $nstep = `grep "nstep" $f |awk '{print \$3}'`;# total step for md or vcmd or relax
    my $dt = `grep "dt" $prefix.in |awk '{print \$3}'`;# time step size in QE (20 ~ 0.985 fs)
    my $tempw = `grep "tempw" $prefix.in |awk '{print \$3}'`;# time step size in QE (20 ~ 0.985 fs)
    die "No dt or nstep in $f or $file_path/$prefix.in\n" unless($nstep or $dt);
    $nstep =~ s/^\s+|\s+$//g;
    $dt =~ s/^\s+|\s+$//g;
    $tempw =~ s/^\s+|\s+$//g;
   
    my @energy = `grep "!" $f |awk '{print \$5}'`;
    my @pressure = `grep "P=" $f |awk '{print \$6}'`;
    my @density = `grep "density =" $f |awk '{print \$3}'`;
    my @tempw = `grep "T =" $f |awk '{print \$7}'`;
    
    map { s/^\s+|\s+$//g; } @energy;
    map { s/^\s+|\s+$//g; } @pressure;
    map { s/^\s+|\s+$//g; } @density;
    map { s/^\s+|\s+$//g; } @tempw;

    my $output_py = "QEoutput_analysis.py";#generated by this perl script
    my $output_csv = "sout_data.csv";#csv file read by python (need headers)
    my $output_png = "QEout_plot.png";#QE analysis plot
    unlink ($output_py,$output_csv,$output_png);#remove old files
    #!
    my $xlabel = "timestep ($dt in QE value)";
    #!
    my $headers;
    if(@tempw){
        $headers = "step,totE(keV),Stress(kbar),density(g/cm^3),Temp(K)";
    }
    else{
        $headers = "step,totE(keV),Stress(kbar),density(g/cm^3)";
    }
    my $subplot = split(',', $headers) - 1;#for subplots, "step" is for x axis
    #prepare the data to plot
    open my $sout_data ,"> ./$output_csv";
    #make headers first
    print $sout_data "$headers\n";
    for (0..$#energy){
        $energy[$_] = $energy[$_] * 0.013605684958731;
        my $ener = sprintf("%.6f",$energy[$_]);
        if($tempw[$_]){
            print $sout_data "$_,$ener,$pressure[$_],$density[$_],$tempw[$_]\n";
        }
        else{
            print $sout_data "$_,$ener,$pressure[$_],$density[$_]\n";
        }
    }
    close ($sout_data);

    my %plot_para = (
                read_csv => $output_csv,
                xlabel => $xlabel,
                output_file => $output_png,
                output_py => $output_py,
                subplotNo => $subplot
                );
    &plot_png(\%plot_para);#create the python script    
    system("python $output_py");
    #unlink "$output_py";
}#over all sout files

sub plot_png
{
my ($plot_para_hr) = @_;
my $plot_png = <<"END_MESSAGE";
import matplotlib.pyplot as plt
from matplotlib.ticker import ScalarFormatter
import os, sys
import re
import os.path
import shutil
import numpy as np

filename = "$plot_para_hr->{read_csv}"

#not use offset and scientific notion in figures.
formatter = ScalarFormatter(useOffset=True)
formatter.set_scientific(False)

# Open the file and read the first line to get the heaNoneders
with open(filename, 'r') as f:
    headers = f.readline().strip().split(',')
#print (f"headers: {headers}")
xlabel='$plot_para_hr->{xlabel}'
color=['red','green','blue','black','cyan','magenta','white']

data = np.genfromtxt(filename, names=headers, delimiter=',')
#print (data.dtype.names)
fig, ax = plt.subplots($plot_para_hr->{subplotNo})
count = 0
for name in data.dtype.names[1:]:
    data[name] = ["%.6f" % item for item in data[name]]
    ax[count].set_xlabel(xlabel,color='black',fontweight='bold')
    ax[count].set_ylabel(headers[count+1],color='black',fontweight='bold')
    # Apply the formatter to the y-axis
    ax[count].yaxis.set_major_formatter(formatter) 
    ax[count].plot(data['step'], data[name],color=color[count],marker='s',markevery=5,label=name)
    ax[count].grid()# Create a ScalarFormatter object
    count = count + 1
fig.tight_layout()
if os.path.isfile("./$plot_para_hr->{output_file}"):
    os.remove("./$plot_para_hr->{output_file}")
plt.savefig("./$plot_para_hr->{output_file}")

END_MESSAGE

    open(FH, '>', $plot_para_hr->{output_py}) or die $!;
    print FH $plot_png;
    close(FH);
    
}#end sub
